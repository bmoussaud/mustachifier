apply plugin: 'java'
apply plugin: 'maven'

group = 'com.xebialabs.deployit.cli'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.6
sourceEncoding = 'UTF-8'

cliVersion = '3.0.4'
trueZipVersion = '7.0-rc2'

dependencies {
  compile("com.xebialabs.deployit:cli:${cliVersion}") {
    exclude group: 'com.google.collections', module: 'google-collections'
  }
  compile 'com.google.guava:guava:r09'
  compile 'com.google.code.findbugs:jsr305:1.3.9'
  compile "de.schlichtherle.truezip:truezip-file:${trueZipVersion}"
  runtime "de.schlichtherle.truezip:truezip-driver-zip:${trueZipVersion}"
  testCompile 'junit:junit:4.8.2'
  //testCompile 'com.qrmedia.commons:commons-lang:1.0.2'
}

localNexusBaseUrl = 'http://localhost:8081/nexus/content'

repositories {
	mavenLocal()
	mavenRepo urls: "${localNexusBaseUrl}/groups/public/"
}

task jarWithDeps(type: Jar, dependsOn: classes) {
	archiveName = "${baseName}.${extension}"
	mergeDir = "${buildDir}/merge"
	truezipSpiFile = 'META-INF/services/de.schlichtherle.truezip.fs.spi.FsDriverService'
	// no inheritance from other projects so no need to be lazy here
	runtimeDeps = configurations.runtime.collect { zipTree(it) }

	doFirst {
		new File(mergeDir).delete()
		mergeFiles(mergeDir, runtimeDeps, truezipSpiFile)
	}

	// this project's classes and all deps
	from sourceSets*.output.classesDir
	from(runtimeDeps) {
		exclude 'META-INF/*'
		exclude truezipSpiFile
	}
	from mergeDir

  manifest {
  	attributes 'Main-Class': 'com.xebialabs.deployit.overthere.ConnectionChecker'
  }
}

private def mergeFiles(targetDir, fileTrees, relativePath) {
  // prepare the merge
  mergedFile = new File("${targetDir}/${relativePath}")
  new File(mergedFile.parent).mkdirs()

  fileTrees*.matching({ include "**/${relativePath}" })*.each {
    mergedFile << it.bytes
  }
}

afterEvaluate { eachProject ->
  eachProject.tasks.withType(Test).each { testTask ->
    testTask.onlyIf { !project.hasProperty('skipTests') }
    testTask.afterSuite { descriptor, result ->
      if (descriptor.className != null) {
        println "${descriptor.className}: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      } else if (descriptor.className == null && descriptor.parent == null) {
        println "Total: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      }
    }
  }
}

task generatePom << {
  pom { 
    project { 
      build { 
        plugins {
          plugin {
            artifactId 'maven-compiler-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding 
              source = "${sourceCompatibility}".toString()
              target = "${sourceCompatibility}".toString()
            }
          }
          plugin {
            artifactId 'maven-resources-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding
            }
          }
        } 
      } 
    } 
  }.writeTo('pom.xml')
}
