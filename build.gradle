apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'com.xebialabs.deployit.cli'
version = '1.1-SNAPSHOT'

sourceCompatibility = 1.6
sourceEncoding = 'UTF-8'

cliVersion = '3.6.0'
trueZipVersion = '7.3.4'

dependencies {
  compile("com.xebialabs.deployit:cli:${cliVersion}") {
    exclude group: 'com.google.collections', module: 'google-collections'
  }
  compile 'com.google.guava:guava:r09'
  compile 'commons-io:commons-io:1.3.2'
  compile 'com.google.code.findbugs:jsr305:1.3.9'
  compile "de.schlichtherle.truezip:truezip-file:${trueZipVersion}"
  runtime "de.schlichtherle.truezip:truezip-driver-zip:${trueZipVersion}"
  testCompile 'junit:junit:4.8.2'
}


repositories {
        mavenLocal()
        if (!rootProject.hasProperty('offline')) {
                mavenRepo urls: "${nexusBaseUrl}/groups/public/"
                mavenRepo urls: "${nexusBaseUrl}/repositories/thirdparty/"
                mavenRepo urls: "${nexusBaseUrl}/repositories/hidden-thirdparty/"
                mavenRepo urls: "${nexusBaseUrl}/repositories/snapshots"
                mavenRepo urls: "${nexusBaseUrl}/repositories/releases"
                org.apache.ivy.util.url.CredentialsStore.INSTANCE.addCredentials("Sonatype Nexus Repository Manager", nexusHost, nexusUserName, nexusPassword);
                mavenCentral()
                mavenRepo urls: 'https://oss.sonatype.org/service/local/repositories/nljavadude-593/content/'
        }
}


afterEvaluate { eachProject ->
  eachProject.tasks.withType(Test).each { testTask ->
    testTask.onlyIf { !project.hasProperty('skipTests') }
    testTask.afterSuite { descriptor, result ->
      if (descriptor.className != null) {
        println "${descriptor.className}: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      } else if (descriptor.className == null && descriptor.parent == null) {
        println "Total: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      }
    }
  }
}

task generatePom << {
  pom { 
    project { 
      build { 
        plugins {
          plugin {
            artifactId 'maven-compiler-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding 
              source = "${sourceCompatibility}".toString()
              target = "${sourceCompatibility}".toString()
            }
          }
          plugin {
            artifactId 'maven-resources-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding
            }
          }
        } 
      } 
    } 
  }.writeTo('pom.xml')
}
